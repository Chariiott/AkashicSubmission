@page "/orders/create"
@using Akashic8.Data
@using Microsoft.EntityFrameworkCore
@using Akashic8.Domain
@inject IDbContextFactory<Akashic8.Data.Akashic8Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Order</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Order" OnValidSubmit="AddOrder" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="dateout" class="form-label">DateOut:</label>
                <InputDate id="dateout" @bind-Value="Order.DateOut" class="form-control" />
                <ValidationMessage For="() => Order.DateOut" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="datein" class="form-label">DateIn:</label>
                <InputDate id="datein" @bind-Value="Order.DateIn" class="form-control" />
                <ValidationMessage For="() => Order.DateIn" class="text-danger" />
            </div>


            <div class="mb-3">
                <label for="bookid" class="form-label">Book:</label>
                <InputSelect id="bookid" @bind-Value="Order.BookId" class="form-control">
                    <option value="">-- Select Book --</option>
                    @if (Books != null)
                    {
                        foreach (var book in Books)
                        {
                            <option value="@book.Id">
                                @book.Name

                            </option>
                        }
                    }
                </InputSelect>

                <ValidationMessage For="() => Order.BookId" class="text-danger" />
            </div>


            <div class="mb-3">
                <label for="customerid" class="form-label">Customer:</label>

                <InputSelect id="customerid" @bind-Value="Order.CustomerId" class="form-control">
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">
                                @customer.Name
                            </option>
                        }
                    }
                </InputSelect>

                <ValidationMessage For="() => Order.CustomerId" class="text-danger" />
            </div>



            <div class="mb-3" hidden>
                <label for="datecreated" class="form-label">DateCreated:</label>
                <InputDate id="datecreated" @bind-Value="Order.DateCreated" class="form-control" />
                <ValidationMessage For="() => Order.DateCreated" class="text-danger" />
            </div>
            <div class="mb-3" hidden>
                <label for="dateupdated" class="form-label">DateUpdated:</label>
                <InputDate id="dateupdated" @bind-Value="Order.DateUpdated" class="form-control" />
                <ValidationMessage For="() => Order.DateUpdated" class="text-danger" />
            </div>
            <div class="mb-3" hidden>
                <label for="createdby" class="form-label">CreatedBy:</label>
                <InputText id="createdby" @bind-Value="Order.CreatedBy" class="form-control" />
                <ValidationMessage For="() => Order.CreatedBy" class="text-danger" />
            </div>
            <div class="mb-3" hidden>
                <label for="updatedby" class="form-label">UpdatedBy:</label>
                <InputText id="updatedby" @bind-Value="Order.UpdatedBy" class="form-control" />
                <ValidationMessage For="() => Order.UpdatedBy" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/orders">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]

    private Order Order { get; set; } = new Order
        {
            //Set the default values for the DateOut and DateIn fields.
            DateOut = DateTime.Now,
            DateIn = DateTime.Now.AddDays(1)
        };

    //Declare and initialize Akashic8Context, IList and Dictionaries
    private Akashic8Context context = default!;
    private IList<Book> Books;
    private IList<Customer> Customers;
    private Dictionary<int, Author> AuthorsDict = new Dictionary<int, Author>();
    private Dictionary<int, Genre> GenresDict = new Dictionary<int, Genre>();
    private Dictionary<int, Language> LanguagesDict = new Dictionary<int, Language>();

    //Create userId string to store the user id, default value is "System".
    private string userId = "System";

    //Create isAdmin boolean to store the user role, default value is false.
    private bool isAdmin = false;

    //Inject the AuthenticationStateProvider to get the user id.
    @inject AuthenticationStateProvider authenticationStateProvider

    //Override the OnInitialized method to get the user id and all the entities.
    protected override async void OnInitialized()
    {
        // Retrieve authentication state and user information
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the userId claim
        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }

        // Check if the user is authenticated and is an administrator
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            isAdmin = user.IsInRole("Administrator");
        }

        //Initialize the DbContext
        context = DbFactory.CreateDbContext();

        //Load data from the database
        Books = context.Book.ToList();

        //Get all the customers created by the user or all customers if the user is an administrator
        Customers = context.Customer.Where(c => c.CreatedBy == userId).ToList();
        if (isAdmin)
        {
            Customers = context.Customer.ToList();
        }

        AuthorsDict = context.Author.ToDictionary(o => o.Id, o => o);
        GenresDict = context.Genre.ToDictionary(o => o.Id, o => o);
        LanguagesDict = context.Language.ToDictionary(o => o.Id, o => o);
    }
    private async Task AddOrder()
    {
        using var context = DbFactory.CreateDbContext();
        //Set the userId to the CreatedBy and UpdatedBy fields.
        Order.CreatedBy = userId;
        Order.UpdatedBy = userId;
        //Set the DateCreated and DateUpdated fields to the current date and time.
        Order.DateCreated = DateTime.Now;
        Order.DateUpdated = DateTime.Now;

        context.Order.Add(Order);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/orders");
    }
}
